// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	App              *app
	AppDetail        *appDetail
	AppInstalled     *appInstalled
	AppLog           *appLog
	AppServiceStatus *appServiceStatus
	AppTag           *appTag
	Tag              *tag
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	AppDetail = &Q.AppDetail
	AppInstalled = &Q.AppInstalled
	AppLog = &Q.AppLog
	AppServiceStatus = &Q.AppServiceStatus
	AppTag = &Q.AppTag
	Tag = &Q.Tag
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		App:              newApp(db, opts...),
		AppDetail:        newAppDetail(db, opts...),
		AppInstalled:     newAppInstalled(db, opts...),
		AppLog:           newAppLog(db, opts...),
		AppServiceStatus: newAppServiceStatus(db, opts...),
		AppTag:           newAppTag(db, opts...),
		Tag:              newTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App              app
	AppDetail        appDetail
	AppInstalled     appInstalled
	AppLog           appLog
	AppServiceStatus appServiceStatus
	AppTag           appTag
	Tag              tag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		App:              q.App.clone(db),
		AppDetail:        q.AppDetail.clone(db),
		AppInstalled:     q.AppInstalled.clone(db),
		AppLog:           q.AppLog.clone(db),
		AppServiceStatus: q.AppServiceStatus.clone(db),
		AppTag:           q.AppTag.clone(db),
		Tag:              q.Tag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		App:              q.App.replaceDB(db),
		AppDetail:        q.AppDetail.replaceDB(db),
		AppInstalled:     q.AppInstalled.replaceDB(db),
		AppLog:           q.AppLog.replaceDB(db),
		AppServiceStatus: q.AppServiceStatus.replaceDB(db),
		AppTag:           q.AppTag.replaceDB(db),
		Tag:              q.Tag.replaceDB(db),
	}
}

type queryCtx struct {
	App              IAppDo
	AppDetail        IAppDetailDo
	AppInstalled     IAppInstalledDo
	AppLog           IAppLogDo
	AppServiceStatus IAppServiceStatusDo
	AppTag           IAppTagDo
	Tag              ITagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:              q.App.WithContext(ctx),
		AppDetail:        q.AppDetail.WithContext(ctx),
		AppInstalled:     q.AppInstalled.WithContext(ctx),
		AppLog:           q.AppLog.WithContext(ctx),
		AppServiceStatus: q.AppServiceStatus.WithContext(ctx),
		AppTag:           q.AppTag.WithContext(ctx),
		Tag:              q.Tag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
