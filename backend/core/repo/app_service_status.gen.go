// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doo-store/backend/core/model"
)

func newAppServiceStatus(db *gorm.DB, opts ...gen.DOOption) appServiceStatus {
	_appServiceStatus := appServiceStatus{}

	_appServiceStatus.appServiceStatusDo.UseDB(db, opts...)
	_appServiceStatus.appServiceStatusDo.UseModel(&model.AppServiceStatus{})

	tableName := _appServiceStatus.appServiceStatusDo.TableName()
	_appServiceStatus.ALL = field.NewAsterisk(tableName)
	_appServiceStatus.ID = field.NewInt64(tableName, "id")
	_appServiceStatus.CreatedAt = field.NewTime(tableName, "created_at")
	_appServiceStatus.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appServiceStatus.ContainerName = field.NewString(tableName, "container_name")
	_appServiceStatus.ServiceName = field.NewString(tableName, "service_name")
	_appServiceStatus.IpAddress = field.NewString(tableName, "ip_address")
	_appServiceStatus.Image = field.NewString(tableName, "image")
	_appServiceStatus.Message = field.NewString(tableName, "message")
	_appServiceStatus.Status = field.NewString(tableName, "status")
	_appServiceStatus.InstallID = field.NewInt64(tableName, "install_id")

	_appServiceStatus.fillFieldMap()

	return _appServiceStatus
}

type appServiceStatus struct {
	appServiceStatusDo

	ALL           field.Asterisk
	ID            field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	ContainerName field.String
	ServiceName   field.String
	IpAddress     field.String
	Image         field.String
	Message       field.String
	Status        field.String
	InstallID     field.Int64

	fieldMap map[string]field.Expr
}

func (a appServiceStatus) Table(newTableName string) *appServiceStatus {
	a.appServiceStatusDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appServiceStatus) As(alias string) *appServiceStatus {
	a.appServiceStatusDo.DO = *(a.appServiceStatusDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appServiceStatus) updateTableName(table string) *appServiceStatus {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.ContainerName = field.NewString(table, "container_name")
	a.ServiceName = field.NewString(table, "service_name")
	a.IpAddress = field.NewString(table, "ip_address")
	a.Image = field.NewString(table, "image")
	a.Message = field.NewString(table, "message")
	a.Status = field.NewString(table, "status")
	a.InstallID = field.NewInt64(table, "install_id")

	a.fillFieldMap()

	return a
}

func (a *appServiceStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appServiceStatus) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["container_name"] = a.ContainerName
	a.fieldMap["service_name"] = a.ServiceName
	a.fieldMap["ip_address"] = a.IpAddress
	a.fieldMap["image"] = a.Image
	a.fieldMap["message"] = a.Message
	a.fieldMap["status"] = a.Status
	a.fieldMap["install_id"] = a.InstallID
}

func (a appServiceStatus) clone(db *gorm.DB) appServiceStatus {
	a.appServiceStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appServiceStatus) replaceDB(db *gorm.DB) appServiceStatus {
	a.appServiceStatusDo.ReplaceDB(db)
	return a
}

type appServiceStatusDo struct{ gen.DO }

type IAppServiceStatusDo interface {
	gen.SubQuery
	Debug() IAppServiceStatusDo
	WithContext(ctx context.Context) IAppServiceStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppServiceStatusDo
	WriteDB() IAppServiceStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppServiceStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppServiceStatusDo
	Not(conds ...gen.Condition) IAppServiceStatusDo
	Or(conds ...gen.Condition) IAppServiceStatusDo
	Select(conds ...field.Expr) IAppServiceStatusDo
	Where(conds ...gen.Condition) IAppServiceStatusDo
	Order(conds ...field.Expr) IAppServiceStatusDo
	Distinct(cols ...field.Expr) IAppServiceStatusDo
	Omit(cols ...field.Expr) IAppServiceStatusDo
	Join(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo
	Group(cols ...field.Expr) IAppServiceStatusDo
	Having(conds ...gen.Condition) IAppServiceStatusDo
	Limit(limit int) IAppServiceStatusDo
	Offset(offset int) IAppServiceStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppServiceStatusDo
	Unscoped() IAppServiceStatusDo
	Create(values ...*model.AppServiceStatus) error
	CreateInBatches(values []*model.AppServiceStatus, batchSize int) error
	Save(values ...*model.AppServiceStatus) error
	First() (*model.AppServiceStatus, error)
	Take() (*model.AppServiceStatus, error)
	Last() (*model.AppServiceStatus, error)
	Find() ([]*model.AppServiceStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppServiceStatus, err error)
	FindInBatches(result *[]*model.AppServiceStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppServiceStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppServiceStatusDo
	Assign(attrs ...field.AssignExpr) IAppServiceStatusDo
	Joins(fields ...field.RelationField) IAppServiceStatusDo
	Preload(fields ...field.RelationField) IAppServiceStatusDo
	FirstOrInit() (*model.AppServiceStatus, error)
	FirstOrCreate() (*model.AppServiceStatus, error)
	FindByPage(offset int, limit int) (result []*model.AppServiceStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppServiceStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appServiceStatusDo) Debug() IAppServiceStatusDo {
	return a.withDO(a.DO.Debug())
}

func (a appServiceStatusDo) WithContext(ctx context.Context) IAppServiceStatusDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appServiceStatusDo) ReadDB() IAppServiceStatusDo {
	return a.Clauses(dbresolver.Read)
}

func (a appServiceStatusDo) WriteDB() IAppServiceStatusDo {
	return a.Clauses(dbresolver.Write)
}

func (a appServiceStatusDo) Session(config *gorm.Session) IAppServiceStatusDo {
	return a.withDO(a.DO.Session(config))
}

func (a appServiceStatusDo) Clauses(conds ...clause.Expression) IAppServiceStatusDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appServiceStatusDo) Returning(value interface{}, columns ...string) IAppServiceStatusDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appServiceStatusDo) Not(conds ...gen.Condition) IAppServiceStatusDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appServiceStatusDo) Or(conds ...gen.Condition) IAppServiceStatusDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appServiceStatusDo) Select(conds ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appServiceStatusDo) Where(conds ...gen.Condition) IAppServiceStatusDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appServiceStatusDo) Order(conds ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appServiceStatusDo) Distinct(cols ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appServiceStatusDo) Omit(cols ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appServiceStatusDo) Join(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appServiceStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appServiceStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appServiceStatusDo) Group(cols ...field.Expr) IAppServiceStatusDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appServiceStatusDo) Having(conds ...gen.Condition) IAppServiceStatusDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appServiceStatusDo) Limit(limit int) IAppServiceStatusDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appServiceStatusDo) Offset(offset int) IAppServiceStatusDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appServiceStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppServiceStatusDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appServiceStatusDo) Unscoped() IAppServiceStatusDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appServiceStatusDo) Create(values ...*model.AppServiceStatus) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appServiceStatusDo) CreateInBatches(values []*model.AppServiceStatus, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appServiceStatusDo) Save(values ...*model.AppServiceStatus) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appServiceStatusDo) First() (*model.AppServiceStatus, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServiceStatus), nil
	}
}

func (a appServiceStatusDo) Take() (*model.AppServiceStatus, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServiceStatus), nil
	}
}

func (a appServiceStatusDo) Last() (*model.AppServiceStatus, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServiceStatus), nil
	}
}

func (a appServiceStatusDo) Find() ([]*model.AppServiceStatus, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppServiceStatus), err
}

func (a appServiceStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppServiceStatus, err error) {
	buf := make([]*model.AppServiceStatus, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appServiceStatusDo) FindInBatches(result *[]*model.AppServiceStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appServiceStatusDo) Attrs(attrs ...field.AssignExpr) IAppServiceStatusDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appServiceStatusDo) Assign(attrs ...field.AssignExpr) IAppServiceStatusDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appServiceStatusDo) Joins(fields ...field.RelationField) IAppServiceStatusDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appServiceStatusDo) Preload(fields ...field.RelationField) IAppServiceStatusDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appServiceStatusDo) FirstOrInit() (*model.AppServiceStatus, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServiceStatus), nil
	}
}

func (a appServiceStatusDo) FirstOrCreate() (*model.AppServiceStatus, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppServiceStatus), nil
	}
}

func (a appServiceStatusDo) FindByPage(offset int, limit int) (result []*model.AppServiceStatus, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appServiceStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appServiceStatusDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appServiceStatusDo) Delete(models ...*model.AppServiceStatus) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appServiceStatusDo) withDO(do gen.Dao) *appServiceStatusDo {
	a.DO = *do.(*gen.DO)
	return a
}
